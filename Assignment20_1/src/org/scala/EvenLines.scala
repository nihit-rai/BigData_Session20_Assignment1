
package org.scala

import org.apache.spark.SparkConf
import org.apache.spark.storage.StorageLevel
import org.apache.spark.streaming.{Seconds, StreamingContext}

/**
 * Counts words in UTF8 encoded, '\n' delimited text received from the network every second.
 *
 * Usage: EvenLines <hostname> <port>
 * <hostname> and <port> describe the TCP server that Spark Streaming would connect to receive data.
 *
 * To run this on your local machine, you need to first run a Netcat server
 *    `$ nc -lk 9999`
 * and then run the example
 *    `$ bin/run-example org.apache.spark.examples.streaming.NetworkWordCount localhost 9999`
 */
object EvenLines {
  def main(args: Array[String]) {
    if (args.length < 2) {
      System.err.println("Usage: EvenLines <hostname> <port>")
      System.exit(1)
    }

    StreamingExamples.setStreamingLogLevels()

    // Create the context with a 1 second batch size
    val sparkConf = new SparkConf().setAppName("EvenLines")
    val ssc = new StreamingContext(sparkConf, Seconds(10))
    
    var strList = "";
    // Create a socket stream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    // Note that no duplication in storage level only for running locally.
    // Replication necessary in distributed scenario for fault tolerance.
    val lines = ssc.socketTextStream(args(0), args(1).toInt, StorageLevel.MEMORY_AND_DISK_SER);
    
    val overAllList = List("");
    val tempList = List("");
   
   
    val linesFiltered = lines.filter { x => getLineSum(x)%2==0 };
     
    val linesSum = linesFiltered.map { x => getLineSum(x) };
    
    println("Lines with even sum");
    linesFiltered.print();
    println("");
    print("Sum of numbers in even lines : ");
    linesSum.reduce( (c1, c2) => c1 + c2).print();
    
  
    ssc.start()
    ssc.awaitTermination()
  }
    
   
   def getLineSum(ln : String): Double={
    val lineWords = ln.split(" ");
    var num: Double = 0;
    for(x <- lineWords)
    {
       try {
         val f = x.toDouble;
         num = num + f;
      } catch {
         case ex: Exception =>{    }         
      }
    }
   return num;
  }
  
}



// scalastyle:on println
